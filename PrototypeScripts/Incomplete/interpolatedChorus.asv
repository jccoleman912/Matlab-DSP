% Interpolated chorus prototype
% 
% April 17 2024 
% 
% A prototype script to test out and refine the DSP of a chorus/flanger
% effect with linear and cubic interpolation.
clear; clc; close all;

% Pulling the test audio file
rootdirectory = '/Users/jackdonsurfer/Documents/MATLAB/InputFiles/';
[x, Fs] = audioread(fullfile(rootdirectory, 'AcGtr.wav'));

% Setting up potentially useful variables
Ts = 1/Fs;
%padLength = 2 * Fs;
%zerosPad = zeroes()
N = length(x);
t = [0:N-1]' * Ts;

% Input parameters
offsetMS = 15; % in ms
depthMS = 2; % in ms
rate = 1; % in Hz
mix = 50; % in percentage
flangerBool = true; % true: flanger, false: chorus
interpolationType = "linear"; % "linear" "cubic" or "none"
mixCoefficient = mix * 0.01; % converting percentage to decimal


% A conditional check to 
if(~flangerBool) 
    offsetSamples = round((offsetMS/1000) * Fs);
    depthSamples = round((depthMS/1000) * Fs);
else
    offsetSamples = 3; % Hypothetical values
    depthSamples = 3;
end

LFO = depthSamples * sin(2 * pi * t * rate);

delayedSignal = zeros(N, 1);

% The interator for a chorus with linear interpolation
if(interpolationType == "linear")
    for n = 1:N
        if(n > offsetSamples)
            delayedSig(n , 1) = (remainderOfLFOAndOffset * x(n - floorOfLFOAndOffset - 1)) ... 
	+ ((1 - remainderOfLFOAndOffset)* x(n - floorOfLFOAndOffset));





            momentaryDelay = offsetSamples + LFO(n-offsetSamples, 1);
            Aflr = floor(momentaryDelay);
            Aremainder = momentaryDelay - Aflr;

            delayedSignal(n, 1) = (x(Aremainder * (n - (Aflr + 1)), 1)) ...
                + x((n - Aflr) * (1 - Aremainder), 1);
        else
            delayedSignal(n, 1) = 0;
        end
    end

% The interator for a chorus with cubic interpolation
elseif(interpolationType == "cubic")
    for n = 1:N
        if(n > offsetSamples)
            delayedSignal(n, 1) = x(( (n-offsetSamples) + floor(LFO(n-offsetSamples)) ), 1);
        else
            delayedSignal(n, 1) = 0;
        end
    end

% The interator for a chorus without any interpolation
else
    for n = 1:N
        if(n > offsetSamples)
            delayedSignal(n, 1) = x(( (n-offsetSamples) + ...
                floor(LFO(n-offsetSamples)) ), 1);
        elseif(n > N)
            delayedSignal(n, 1) = 0;
        end
    end
end

plot(delayedSignal);

y = (x * (1 - mixCoefficient)) + (delayedSignal * mixCoefficient);

%sound([x; y], Fs);

